{"meta":{"title":"James Li的博客","subtitle":"安静的敲代码","description":"Android,Java开发,qq/微信:286417488","author":"James Li","url":"http://yoursite.com"},"pages":[{"title":"categories","date":"2018-08-15T06:28:43.000Z","updated":"2018-08-15T06:29:06.012Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-08-15T06:25:58.000Z","updated":"2018-08-15T06:29:19.713Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"第7篇","slug":"Markdown语法(CmdMarkdown)","date":"2018-08-13T10:30:07.000Z","updated":"2018-08-15T06:55:24.238Z","comments":true,"path":"2018/08/13/Markdown语法(CmdMarkdown)/","link":"","permalink":"http://yoursite.com/2018/08/13/Markdown语法(CmdMarkdown)/","excerpt":"","text":"欢迎使用 Cmd Markdown 编辑阅读器 我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，Cmd Markdown 是我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。 您可以使用 Cmd Markdown： 整理知识，学习笔记 发布日记，杂文，所见所想 撰写发布技术文稿（代码支持） 撰写发布学术论文（LaTeX 公式支持） 除了您现在看到的这个 Cmd Markdown 在线版本，您还可以前往以下网址下载： Windows/Mac/Linux 全平台客户端 请保留此份 Cmd Markdown 的欢迎稿兼使用说明，如需撰写新稿件，点击顶部工具栏右侧的 新文稿 或者使用快捷键 Ctrl+Alt+N。 什么是 MarkdownMarkdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，粗体 或者 斜体 某些文字，更棒的是，它还可以 1. 制作一份待办事宜 Todo 列表 支持以 PDF 格式导出文稿 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率 新增 Todo 列表功能 修复 LaTex 公式渲染问题 新增 LaTex 公式编号功能 2. 书写一个质能守恒公式[^LaTeX]$$E=mc^2$$ 3. 高亮一段代码[^code]1234567@requires_authorizationclass SomeClass: passif __name__ == '__main__': # A comment print 'hello world' 4. 高效绘制 流程图12345678st=&gt;start: Startop=&gt;operation: Your Operationcond=&gt;condition: Yes or No?e=&gt;endst-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op 5. 高效绘制 序列图123Alice-&gt;Bob: Hello Bob, how are you?Note right of Bob: Bob thinksBob--&gt;Alice: I am good thanks! 6. 高效绘制 甘特图12345678910111213title 项目开发流程section 项目确定 需求分析 :a1, 2016-06-22, 3d 可行性报告 :after a1, 5d 概念验证 : 5dsection 项目实施 概要设计 :2016-07-05 , 5d 详细设计 :2016-07-08, 10d 编码 :2016-07-15, 10d 测试 :2016-07-22, 5dsection 发布验收 发布: 2d 验收: 3d 7. 绘制表格 项目 价格 数量 计算机 $1600 5 手机 $12 12 管线 $1 234 8. 更详细语法说明想要查看更详细的语法说明，可以参考我们准备的 Cmd Markdown 简明语法手册，进阶用户可以参考 Cmd Markdown 高阶语法手册 了解更多高级功能。 总而言之，不同于其它 所见即所得 的编辑器：你只需使用键盘专注于书写文本内容，就可以生成印刷级的排版格式，省却在键盘和工具栏之间来回切换，调整内容和格式的麻烦。Markdown 在流畅的书写和印刷级的阅读体验之间找到了平衡。 目前它已经成为世界上最大的技术分享网站 GitHub 和 技术问答网站 StackOverFlow 的御用书写格式。 什么是 Cmd Markdown您可以使用很多工具书写 Markdown，但是 Cmd Markdown 是这个星球上我们已知的、最好的 Markdown 工具——没有之一 ：）因为深信文字的力量，所以我们和你一样，对流畅书写，分享思想和知识，以及阅读体验有极致的追求，我们把对于这些诉求的回应整合在 Cmd Markdown，并且一次，两次，三次，乃至无数次地提升这个工具的体验，最终将它演化成一个 编辑/发布/阅读 Markdown 的在线平台——您可以在任何地方，任何系统/设备上管理这里的文字。 1. 实时同步预览我们将 Cmd Markdown 的主界面一分为二，左边为编辑区，右边为预览区，在编辑区的操作会实时地渲染到预览区方便查看最终的版面效果，并且如果你在其中一个区拖动滚动条，我们有一个巧妙的算法把另一个区的滚动条同步到等价的位置，超酷！ 2. 编辑工具栏也许您还是一个 Markdown 语法的新手，在您完全熟悉它之前，我们在 编辑区 的顶部放置了一个如下图所示的工具栏，您可以使用鼠标在工具栏上调整格式，不过我们仍旧鼓励你使用键盘标记格式，提高书写的流畅度。 3. 编辑模式完全心无旁骛的方式编辑文字：点击 编辑工具栏 最右侧的拉伸按钮或者按下 Ctrl + M，将 Cmd Markdown 切换到独立的编辑模式，这是一个极度简洁的写作环境，所有可能会引起分心的元素都已经被挪除，超清爽！ 4. 实时的云端文稿为了保障数据安全，Cmd Markdown 会将您每一次击键的内容保存至云端，同时在 编辑工具栏 的最右侧提示 已保存 的字样。无需担心浏览器崩溃，机器掉电或者地震，海啸——在编辑的过程中随时关闭浏览器或者机器，下一次回到 Cmd Markdown 的时候继续写作。 5. 离线模式在网络环境不稳定的情况下记录文字一样很安全！在您写作的时候，如果电脑突然失去网络连接，Cmd Markdown 会智能切换至离线模式，将您后续键入的文字保存在本地，直到网络恢复再将他们传送至云端，即使在网络恢复前关闭浏览器或者电脑，一样没有问题，等到下次开启 Cmd Markdown 的时候，她会提醒您将离线保存的文字传送至云端。简而言之，我们尽最大的努力保障您文字的安全。 6. 管理工具栏为了便于管理您的文稿，在 预览区 的顶部放置了如下所示的 管理工具栏： 通过管理工具栏可以： 发布：将当前的文稿生成固定链接，在网络上发布，分享 新建：开始撰写一篇新的文稿 删除：删除当前的文稿 导出：将当前的文稿转化为 Markdown 文本或者 Html 格式，并导出到本地 列表：所有新增和过往的文稿都可以在这里查看、操作 模式：切换 普通/Vim/Emacs 编辑模式 7. 阅读工具栏 通过 预览区 右上角的 阅读工具栏，可以查看当前文稿的目录并增强阅读体验。 工具栏上的五个图标依次为： 目录：快速导航当前文稿的目录结构以跳转到感兴趣的段落 视图：互换左边编辑区和右边预览区的位置 主题：内置了黑白两种模式的主题，试试 黑色主题，超炫！ 阅读：心无旁骛的阅读模式提供超一流的阅读体验 全屏：简洁，简洁，再简洁，一个完全沉浸式的写作和阅读环境 8. 阅读模式在 阅读工具栏 点击 或者按下 Ctrl+Alt+M 随即进入独立的阅读模式界面，我们在版面渲染上的每一个细节：字体，字号，行间距，前背景色都倾注了大量的时间，努力提升阅读的体验和品质。 9. 标签、分类和搜索在编辑区任意行首位置输入以下格式的文字可以标签当前文档： 标签： 未分类 标签以后的文稿在【文件列表】（Ctrl+Alt+F）里会按照标签分类，用户可以同时使用键盘或者鼠标浏览查看，或者在【文件列表】的搜索文本框内搜索标题关键字过滤文稿，如下图所示： 10. 文稿发布和分享在您使用 Cmd Markdown 记录，创作，整理，阅读文稿的同时，我们不仅希望它是一个有力的工具，更希望您的思想和知识通过这个平台，连同优质的阅读体验，将他们分享给有相同志趣的人，进而鼓励更多的人来到这里记录分享他们的思想和知识，尝试点击 (Ctrl+Alt+P) 发布这份文档给好友吧！ 再一次感谢您花费时间阅读这份欢迎稿，点击 (Ctrl+Alt+N) 开始撰写新的文稿吧！祝您在这里记录、阅读、分享愉快！ 作者 @ghosert2016 年 07月 07日 [^LaTeX]: 支持 LaTeX 编辑显示支持，例如：$\\sum_{i=1}^n a_i=0$， 访问 MathJax 参考更多使用方法。 [^code]: 代码高亮功能支持包括 Java, Python, JavaScript 在内的，四十一种主流编程语言。","categories":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/categories/工具/"}],"tags":[{"name":"Markdown","slug":"Markdown","permalink":"http://yoursite.com/tags/Markdown/"},{"name":"通用","slug":"通用","permalink":"http://yoursite.com/tags/通用/"},{"name":"工具","slug":"工具","permalink":"http://yoursite.com/tags/工具/"},{"name":"效率","slug":"效率","permalink":"http://yoursite.com/tags/效率/"}]},{"title":"第6篇","slug":"第6篇","date":"2018-08-13T10:30:02.000Z","updated":"2018-08-13T10:30:02.868Z","comments":true,"path":"2018/08/13/第6篇/","link":"","permalink":"http://yoursite.com/2018/08/13/第6篇/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"第5篇","slug":"第5篇","date":"2018-08-13T10:29:58.000Z","updated":"2018-08-13T10:29:58.408Z","comments":true,"path":"2018/08/13/第5篇/","link":"","permalink":"http://yoursite.com/2018/08/13/第5篇/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"第4篇","slug":"第4篇","date":"2018-08-13T10:29:53.000Z","updated":"2018-08-13T10:29:53.951Z","comments":true,"path":"2018/08/13/第4篇/","link":"","permalink":"http://yoursite.com/2018/08/13/第4篇/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"第3篇","slug":"第3篇","date":"2018-08-13T10:29:48.000Z","updated":"2018-08-13T10:29:48.747Z","comments":true,"path":"2018/08/13/第3篇/","link":"","permalink":"http://yoursite.com/2018/08/13/第3篇/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"圆形图片实现几种方法","slug":"圆形图片实现几种方法","date":"2018-08-13T09:20:10.000Z","updated":"2018-08-14T02:28:39.801Z","comments":true,"path":"2018/08/13/圆形图片实现几种方法/","link":"","permalink":"http://yoursite.com/2018/08/13/圆形图片实现几种方法/","excerpt":"","text":"圆形图片实现方法12345678910111213private Bitmap createCircleImage(Bitmap source, int min) &#123; Canvas canvas = new Canvas(target); final Paint paint = new Paint(); paint.setAntiAlias(true); Bitmap target = Bitmap.createBitmap(min, min, Config.ARGB_8888); canvas.drawCircle(min / 2, min / 2, min / 2, paint); paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN)); //SRC_IN官方注释/** [Sa * Da, Sc * Da] */,一个px的[透明度,颜色值].S:source(图片),D:dest(图片),a:alpha,c:color. //假如source为方形图片(透明度为1,即全不透明),dest为圆形图片(圆形外的透明度为0), //Sa * Da在圆形内=1*1即不透明,其它区域为1*0,即透明; //Sc*Da 在圆形内颜色为Sc,其它区域为Sc*0;因此显示圆形,颜色值为方形的颜色值. canvas.drawBitmap(source, 0, 0, paint); &#125; 使用shape xml进行设置 使用v4包圆角RoundedBitmapDrawable控件:Bitmap bitmap = BitmapFactory.decodeResource(getResources(), R.mipmap.guide_pic_two); RoundedBitmapDrawable roundedBitmapDrawable = RoundedBitmapDrawableFactory.create(getResources(), bitmap); roundedBitmapDrawable.setCircular(true); // roundedBitmapDrawable.setCornerRadius(20);//设置圆角 mIvHeading.setImageDrawable(roundedBitmapDrawable); 自定义圆形控件,继承ImageView: 方法一:将整个bitmap的尺寸缩放至控件尺寸,然后截取正方形,再使用新的canvs进行绘制, 得到圆形bitmap,再将圆形bitmap绘制到控件里. private Bitmap createCircleImage(Bitmap source, int min) { Canvas canvas = new Canvas(target); final Paint paint = new Paint(); paint.setAntiAlias(true); Bitmap target = Bitmap.createBitmap(min, min, Config.ARGB_8888); canvas.drawCircle(min / 2, min / 2, min / 2, paint); paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN)); //SRC_IN官方注释/** [Sa * Da, Sc * Da] */,一个px的[透明度,颜色值].S:source(图片),D:dest(图片),a:alpha,c:color. //假如source为方形图片(透明度为1,即全不透明),dest为圆形图片(圆形外的透明度为0), //Sa * Da在圆形内=1*1即不透明,其它区域为1*0,即透明; //Sc*Da 在圆形内颜色为Sc,其它区域为Sc*0;因此显示圆形,颜色值为方形的颜色值. canvas.drawBitmap(source, 0, 0, paint); } 方法二:将bitmap,存放bitmap与控件尺寸之间缩放值的Matrix(矩阵)与BitmapShader(着色器)关联,mPaint.setShader(). 开源包:https://github.com/hdodenhof/CircleImageView 简单模仿实现圆形图片: private Paint mPaint = new Paint(); private Bitmap mBitmap; private BitmapShader mBitmapShader; private ColorFilter mColorFilter; private final Matrix mShaderMatrix = new Matrix(); int mBitmapHeight, mBitmapWidth; public void setCircleView() { mBitmap = getBitmapFromDrawable(getDrawable()); mBitmapShader = new BitmapShader(mBitmap, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP); mPaint.setAntiAlias(true); mPaint.setShader(mBitmapShader); mPaint.setColorFilter(mColorFilter); mBitmapHeight = mBitmap.getHeight(); mBitmapWidth = mBitmap.getWidth(); updateShaderMatrix(); invalidate(); } @Override public void setColorFilter(ColorFilter cf) { super.setColorFilter(cf); if (cf == mColorFilter) { return; } mColorFilter = cf; mPaint.setColorFilter(mColorFilter); invalidate(); } private Bitmap getBitmapFromDrawable(Drawable drawable) { if (drawable == null) { return null; } if (drawable instanceof BitmapDrawable) { return ((BitmapDrawable) drawable).getBitmap(); } return null; } private void updateShaderMatrix() { float scale; float dx = 0; float dy = 0; mShaderMatrix.set(null); if (mBitmapWidth * getHeight() &gt; getWidth() * mBitmapHeight) { scale = getHeight() / (float) mBitmapHeight; dx = (getWidth() - mBitmapWidth * scale) * 0.5f; } else { scale = getWidth() / (float) mBitmapWidth; dy = (getHeight() - mBitmapHeight * scale) * 0.5f; } mShaderMatrix.setScale(scale, scale); mShaderMatrix.postTranslate((int) (dx + 0.5f), (int) (dy + 0.5f)); mBitmapShader.setLocalMatrix(mShaderMatrix); } @Override protected void onDraw(Canvas canvas) { if (mBitmap != null) { canvas.drawCircle(getWidth() / 2, getHeight() / 2, getWidth() / 2, mPaint); } else { super.onDraw(canvas); } } 以下为hongyang文章:Android 完美实现图片圆角和圆形 图片需去博客观看,链接：http://blog.csdn.net/lmj623565791/article/details/24555655本来想在网上找个圆角的例子看一看，不尽人意啊，基本都是官方的Demo的那张原理图，稍后会贴出。于是自己自定义了个View，实现图片的圆角以及圆形效果。效果图： 第一个是原图，第二个是圆形效果，第三第四设置了不同的圆角大小。准备改变一个博客的风格，首先给大家讲一下原理，让大家明白了，然后再贴代码，不然可以直接看那么长的代码也比较痛苦，核心代码其实就那么几行：核心代码分析：[java] view plaincopy/** 根据原图和变长绘制圆形图片 @param source @param min @return*/private Bitmap createCircleImage(Bitmap source, int min){ final Paint paint = new Paint(); paint.setAntiAlias(true); Bitmap target = Bitmap.createBitmap(min, min, Config.ARGB_8888); /** 产生一个同样大小的画布*/Canvas canvas = new Canvas(target);/** 首先绘制圆形*/canvas.drawCircle(min / 2, min / 2, min / 2, paint);/** 使用SRC_IN*/paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));/** 绘制图片*/canvas.drawBitmap(source, 0, 0, paint);return target;} 其实主要靠：paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));这行代码，为什么呢，我给大家解释下，SRC_IN这种模式，两个绘制的效果叠加后取交集展现后图，怎么说呢，咱们第一个绘制的是个圆形，第二个绘制的是个Bitmap，于是交集为圆形，展现的是BItmap，就实现了圆形图片效果。圆角，其实就是先绘制圆角矩形，是不是很简单，以后别人再说实现圆角，你就把这一行代码给他就行了。从Android的示例中，给大家证明一下：下面有一张PorterDuff.Mode的16中效果图，咱们的只是其一： 源码咱们只关心谁先谁后绘制的：[java] view plaincopycanvas.translate(x, y); canvas.drawBitmap(mDstB, 0, 0, paint); paint.setXfermode(sModes[i]); canvas.drawBitmap(mSrcB, 0, 0, paint); paint.setXfermode(null); canvas.restoreToCount(sc);可以看出先绘制的Dst,再绘制的Src，最后的展示是SrcIn那个图：显示的区域是二者交集，展示的是Src(后者)。和咱们前面结论一致。效果16种，大家可以自由组合展示不同的效果。 好了，原理和核心代码解释完成。下面开始写自定义View。1、自定义属性：[html] view plaincopy&lt;?xml version=”1.0” encoding=”utf-8”?&gt; 2、构造中获取自定义的属性：[java] view plaincopy/** TYPE_CIRCLE / TYPE_ROUND*/private int type;private static final int TYPE_CIRCLE = 0;private static final int TYPE_ROUND = 1; /** 图片*/private Bitmap mSrc; /** 圆角的大小*/private int mRadius; /** 控件的宽度*/private int mWidth;/** 控件的高度*/private int mHeight; public CustomImageView(Context context, AttributeSet attrs){ this(context, attrs, 0);} public CustomImageView(Context context){ this(context, null);} /** 初始化一些自定义的参数 @param context @param attrs @param defStyle*/public CustomImageView(Context context, AttributeSet attrs, int defStyle){ super(context, attrs, defStyle); TypedArray a = context.getTheme().obtainStyledAttributes(attrs, R.styleable.CustomImageView, defStyle, 0); int n = a.getIndexCount(); for (int i = 0; i &lt; n; i++) { int attr = a.getIndex(i); switch (attr) { case R.styleable.CustomImageView_src: mSrc = BitmapFactory.decodeResource(getResources(), a.getResourceId(attr, 0)); break; case R.styleable.CustomImageView_type: type = a.getInt(attr, 0);// 默认为Circle break; case R.styleable.CustomImageView_borderRadius: mRadius= a.getDimensionPixelSize(attr, (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 10f, getResources().getDisplayMetrics()));// 默认为10DP break; } } a.recycle();} 3、onMeasure中获取控件宽高：[java] view plaincopy/** * 计算控件的高度和宽度 */ @Override protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) { // super.onMeasure(widthMeasureSpec, heightMeasureSpec); /** * 设置宽度 */ int specMode = MeasureSpec.getMode(widthMeasureSpec); int specSize = MeasureSpec.getSize(widthMeasureSpec); if (specMode == MeasureSpec.EXACTLY)// match_parent , accurate { mWidth = specSize; } else { // 由图片决定的宽 int desireByImg = getPaddingLeft() + getPaddingRight() + mSrc.getWidth(); if (specMode == MeasureSpec.AT_MOST)// wrap_content { mWidth = Math.min(desireByImg, specSize); } else mWidth = desireByImg; } /*** * 设置高度 */ specMode = MeasureSpec.getMode(heightMeasureSpec); specSize = MeasureSpec.getSize(heightMeasureSpec); if (specMode == MeasureSpec.EXACTLY)// match_parent , accurate { mHeight = specSize; } else { int desire = getPaddingTop() + getPaddingBottom() + mSrc.getHeight(); if (specMode == MeasureSpec.AT_MOST)// wrap_content { mHeight = Math.min(desire, specSize); } else mHeight = desire; } setMeasuredDimension(mWidth, mHeight); } 4、根据Type绘制：[java] view plaincopy/** * 绘制 */ @Override protected void onDraw(Canvas canvas) { switch (type) { // 如果是TYPE_CIRCLE绘制圆形 case TYPE_CIRCLE: int min = Math.min(mWidth, mHeight); /** * 长度如果不一致，按小的值进行压缩 */ mSrc = Bitmap.createScaledBitmap(mSrc, min, min, false); canvas.drawBitmap(createCircleImage(mSrc, min), 0, 0, null); break; case TYPE_ROUND: canvas.drawBitmap(createRoundConerImage(mSrc), 0, 0, null); break; } } /** * 根据原图和变长绘制圆形图片 * * @param source * @param min * @return */ private Bitmap createCircleImage(Bitmap source, int min) { final Paint paint = new Paint(); paint.setAntiAlias(true); Bitmap target = Bitmap.createBitmap(min, min, Config.ARGB_8888); /** * 产生一个同样大小的画布 */ Canvas canvas = new Canvas(target); /** * 首先绘制圆形 */ canvas.drawCircle(min / 2, min / 2, min / 2, paint); /** * 使用SRC_IN，参考上面的说明 */ paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN)); /** * 绘制图片 */ canvas.drawBitmap(source, 0, 0, paint); return target; } /** * 根据原图添加圆角 * * @param source * @return */ private Bitmap createRoundConerImage(Bitmap source) { final Paint paint = new Paint(); paint.setAntiAlias(true); Bitmap target = Bitmap.createBitmap(mWidth, mHeight, Config.ARGB_8888); Canvas canvas = new Canvas(target); RectF rect = new RectF(0, 0, source.getWidth(), source.getHeight()); canvas.drawRoundRect(rect, mRadius, mRadius, paint); paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN)); canvas.drawBitmap(source, 0, 0, paint); return target; } 来源： http://blog.csdn.net/lmj623565791/article/details/24555655","categories":[],"tags":[]},{"title":"第一篇文章","slug":"第一篇文章","date":"2018-08-13T06:28:09.000Z","updated":"2018-08-13T06:31:21.184Z","comments":true,"path":"2018/08/13/第一篇文章/","link":"","permalink":"http://yoursite.com/2018/08/13/第一篇文章/","excerpt":"","text":"hello this is first portable.","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2018-08-13T03:31:34.025Z","updated":"2017-10-28T00:39:58.000Z","comments":true,"path":"2018/08/13/hello-world/","link":"","permalink":"http://yoursite.com/2018/08/13/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}